# Comparação entre protocolos TCP e UDP

Redes de Computadores II  
Universidade Federal do Paraná  
Departamento de Informática  
Bacharelado em Ciência da Computação

Eduardo Gabriel Kenzo Tanaka - GRR20211791  
Vinícius Yuji Hara - GRR20211763

### Descrição

Este trabalho tem como objetivo comparar o desempenho dos protocolos TCP e UDP. 
Para isso, foram consideradas as metricas de tempo de recebimento e perda de dados na 
transferencia de arquivos e transferencia em memória principal entre servidor e 
cliente.  
Os programas de teste foram implementados em python utilizando as bibliotecas:  
**socket** para comunicação entre as máquinas;  
**time** para contagem de tempo;

### Projeto

#### Definição de métricas e casos de comparação

Serão consideradas as métricas tempo, vazão e quantidade de pacotes perdidos, 
para os seguintes casos de envio de dados: com/sem fragmentação e com/sem 
checksum.

#### Executando o trabalho

Para executar o trabalho com conexão TCP são utilzados os arquivos cliente_tcp.py 
e server_tcp.py. Para a conexão UDP são utilizados os arquivos cliente_udp.py e 
server_udp.py.

O server pode ser executado como exemplo abaixo:

```
python3 server_udp.py <host>
```

Em que:  
  'host' é o nome da máquina do server

E o cliente pode ser executado:

```
python3 cliente_udp.py <metrica> <tam_pacote> <nome_arquivo> <num_bytes> <host> <port>
```

Em que:  
  'métrica' pode ser "arquivo" para transferência de arquivo ou "memoria" para transferir em memória principal.
  'tam_pacote' é o tamanho em bytes que o server vai mandar em cada pacote.
  'nome_arquivo' é o arquivo que o cliente deseja obter do server ou escrever em seu diretório
  'num_bytes' é o tamanho de bytes a ser transferido em memória, para arquivos usa-se 0.
  'host' é o nome da máquina do server

Exemplo para server executando na máquina i29, porta 8000 do dinf
Server:

```
python3 server_udp.py i29
```

Cliente para tranferência de arquivo:

```
python3 cliente_udp.py arquivo 1024 exemplo.txt 0 i29 8000
```

Cliente para tranferência de dados em memória:

```
python3 cliente_udp.py memoria 1024 exemplo.txt 100000 i29 8000
```

### Testes

Para testar os protocolos TCP e UDP foram realizado testes feitos para comparar a transfêrencia de um arquivo de 80MB e 
transfêrencia de dados em memória principal de 1 milhão de bytes.
Os testes foram feitos com o tamanho de pacotes diversos em bytes: 64k, 10k, 5k, 1500, 1024, 100 e 20.
Para cada tamanho de pacote, foi realizado 5 execuções e foi feita uma média entre elas para calcular o tempo de 
recebimento cliente TCP, tempo de recebimento cliente UDP e a porcentagem de pacotes recebidos em relação ao total do clinte UDP.

Resultados dos testes estão no diretório files.

No primeiro momento é visível que em todos os casos, a transferência em memória principal é bem mais rápida que a transferência 
de arquivo. Como é o esperado, o tempo do UDP é menor que TCP, no entanto, para pacotes pequenos como o de 20 e de 100, o tempo do UDP
acabou sendo maior, devido ao buffer e também em casos que leva ao timeout já que o cliente não recebe a ultima mensagem(EOF).

Para pacotes grandes o recebimento do cliente UDP é quase 100%. Para pacotes pequenos, o recebimento dos pacotes caem drasticamente.

Durante nossos testes, para pacotes pequenos, existiam execuções em que o recebimento era de quase 100% e outros casos em que leva o timeout
e os pacotes recebidos eram poucos. 

### Conclusões

Durante os testes realizados, foi concluido que apesar do protocolo UDP levar vantagem no tempo para enviar dados, o tempo foi mais ou menos similar
ao TCP. Além disso, em quase todos os testes, o recebimento dos pacotes não foi de 100% no protocolo UDP. A situação piora se for mandado pacotes pequenos 
em que muitos pacotes acabam se perdendo já que o UDP não implementa controle de fluxo, como consequência o tempo de recebimento fica pior que o do TCP. 

Por essas razões, concluimos que na maioria dos casos, a utilização do protoclo TCP é melhor que do protocolo UDP, já que o protocolo TCP é confiável
e orientado a conexão, além de implementar um controle de fluxo e de congestionamento.
